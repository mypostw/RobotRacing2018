<?xml version="1.0"?>
<!--@file rr_vehicle_teleop.launch
 -  @brief Use Gazebo to simulate a vehicle with Ackermann steering.
 -         Arguments:
 -             namespace (string, default: ackermann_vehicle)
 -                 Vehicle namespace.
 -             world_name (string, default: worlds/empty.world)
 -                 Gazebo world name.
 -             cmd_timeout (float, default: 0.5)
 -                 Command timeout passed to the ackermann_controller.py node.
 -             x (float, default: 0.0)
 -             y (float, default: 0.0)
 -             z (float, default: 0.1)
 -             roll (float, default: 0.0)
 -             pitch (float, default: 0.0)
 -             yaw (float, default: 0.0)
 -                 Vehicle pose. x, y, and z are measured in meters. roll, pitch, and yaw
 -                 are measured in radians.
 -          This code is inspired by code from the WunderKramer lab and GeorgiaTech's
 -          AutoRally team
 -          The repositories are linked here:
 -          https://github.com/autorally/Autorally
 -          https://github.com/vugolfcart/ackermann_vehicle
 -
 -  @author Toni Ogunmade(oluwatoni)
 -  @competition IARRC 2018
-->
<launch>
  <arg name="namespace" default="rr_vehicle"/>
  <arg name="world_name" default="worlds/empty.world"/>
  <arg name="cmd_timeout" default="0.5"/>

  <!-- Vehicle pose -->
  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.1"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <include file="$(find rr_vehicle_description)/launch/rr_vehicle.launch">
    <arg name="namespace" value="$(arg namespace)"/>
  </include>

  <group ns="$(arg namespace)">
    <!-- Create the world. -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(arg world_name)"/>
    </include>

    <!-- Spawn the vehicle. -->
    <node name="spawn_vehicle" pkg="gazebo_ros" type="spawn_model"
          args="-urdf -param robot_description -model ackermann_vehicle
                -gazebo_namespace /$(arg namespace)/gazebo
                -x $(arg x) -y $(arg y) -z $(arg z)
                -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

    <!-- Spawn the target. -->
    <!-- Or run the command:
    rosrun gazebo_ros spawn_model -gazebo_namespace /ackermann_vehicle/gazebo/ -database coke_can -sdf -model target
    
    or include:
    
    <node name="spawn_target" pkg="gazebo_ros" type="spawn_model"
          args="-database coke_can -sdf -model target
                -gazebo_namespace /$(arg namespace)/gazebo
                -x 1 -y 1 -z 1
                -R 0 -P 0 -Y 0"/>
    
    and for moving, publish the rostopic, e.g:
    rostopic pub -r 20 /ackermann_vehicle/gazebo/set_model_state gazebo_msgs/ModelState '{model_name: target, pose: { position: { x: 1, y: 0, z: 2 }, orientation: {x: 0, y: 0.491983115673, z: 0, w: 0.870604813099 } }, twist: { linear: { x: 0, y: 0, z: 0 }, angular: { x: 0, y: 0, z: 0}  }, reference_frame: world }'
    -->

    <!-- Load the joint controllers. One of these publishes the joint states
         to joint_states. -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner"
          args="$(find rr_vehicle_gazebo)/config/em_3905_joint_ctrlr_params.yaml"/>

    <!-- Control the steering and axle joints. -->
    <node name="ackermann_controller" pkg="rr_vehicle_gazebo"
          type="ackermann_controller.py">
      <param name="cmd_timeout" value="$(arg cmd_timeout)"/>
      <rosparam file="$(find rr_vehicle_gazebo)/config/em_3905_ackermann_ctrlr_params.yaml" command="load"/>
    </node>
    
    <!-- Handle the joystick input -->
    <node name="connect_controller" pkg="rr_vehicle_gazebo"
          type="connect_controller.sh" output="screen"/>
    <node pkg="joy" name="joy_node" type="joy_node"/>
    <node name="vehicle_joystick" pkg="rr_vehicle_gazebo"
          type="vehicle_joystick.py" output="screen"/>
  </group>
</launch>
